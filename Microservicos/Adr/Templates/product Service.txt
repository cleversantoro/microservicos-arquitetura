# üìå Modelo C4 - Product Service (E-commerce com Microservi√ßos)

## üîπ N√≠vel 1: Diagrama de Contexto

### **Vis√£o Geral**
O **Product Service** faz parte do sistema de e-commerce e √© respons√°vel pelo gerenciamento de produtos. Ele interage com usu√°rios, outros servi√ßos internos e sistemas externos de cat√°logos e mecanismos de busca.

### **Principais elementos:**
- üõç **Usu√°rio (Cliente):** Acessa o e-commerce para visualizar e comprar produtos.
- üõí **E-commerce System:** Plataforma principal que orquestra pedidos, pagamentos e estoque.
- üì¶ **Product Service:** Microservi√ßo respons√°vel pelo cat√°logo de produtos.
- üîé **Mecanismo de Busca:** Servi√ßo externo para indexa√ß√£o e busca r√°pida de produtos.
- üîó **Cat√°logo Externo:** API de fornecedores que disponibilizam produtos para integra√ß√£o.

---
## üîπ N√≠vel 2: Diagrama de Cont√™ineres

### **Cont√™ineres do Product Service**
- **Frontend Web (React/Next.js):** Interface para o usu√°rio buscar produtos.
- **API Gateway (NestJS ou Spring Cloud Gateway):** Controla as requisi√ß√µes e direciona para os servi√ßos corretos.
- **Product Service (NestJS ou Spring Boot):**
  - Processa e armazena informa√ß√µes dos produtos.
  - Exp√µe APIs para gerenciamento do cat√°logo.
  - Indexa produtos no mecanismo de busca.
- **Banco de Dados (PostgreSQL):** Armazena produtos, pre√ßos e descri√ß√µes.
- **Search Engine (Elasticsearch):** Permite buscas r√°pidas e eficientes.
- **Cat√°logo Externo (Fornecedor API):** Fornece dados de produtos de terceiros.

---
## üîπ N√≠vel 3: Diagrama de Componentes

Aqui detalhamos os componentes internos do **Product Service**.

### **Componentes principais:**
- **ProductController:** Interface HTTP para gerenciar produtos.
- **ProductService:** L√≥gica de neg√≥cios e valida√ß√µes.
- **ProductRepository:** Comunica√ß√£o com o banco de dados PostgreSQL.
- **CatalogIntegrationClient:** Comunica√ß√£o com a API de cat√°logo externo.
- **SearchEngineClient:** Interface para indexa√ß√£o no Elasticsearch.

```
+-----------------------+
|   ProductController  |
+-----------------------+
           |
           v
+-----------------------+
|     ProductService   |
+-----------------------+
  |          |         |
  v          v         v
+-------------+  +-------------------+  +------------------+
| ProductRepo |  | CatalogIntegration |  | SearchEngineCl  |
+-------------+  +-------------------+  +------------------+
  |                           |                  |
  v                           v                  v
+-------------+         +------------------+  +------------+
| PostgreSQL  |         | External Catalog |  | Elasticsearch |
+-------------+         +------------------+  +------------+
```

---
## üîπ N√≠vel 4: C√≥digo (Exemplo Simplificado)

### **1Ô∏è‚É£ ProductController.js**
```javascript
const express = require("express");
const ProductService = require("../services/ProductService");
const router = express.Router();

router.get("/products", async (req, res) => {
    const products = await ProductService.getAllProducts();
    res.json(products);
});

router.post("/products", async (req, res) => {
    const product = await ProductService.createProduct(req.body);
    res.status(201).json(product);
});

module.exports = router;
```

### **2Ô∏è‚É£ ProductService.js**
```javascript
const ProductRepository = require("../repositories/ProductRepository");
const SearchEngineClient = require("../clients/SearchEngineClient");
const CatalogIntegrationClient = require("../clients/CatalogIntegrationClient");

class ProductService {
    static async getAllProducts() {
        return await ProductRepository.getAll();
    }
    
    static async createProduct(productData) {
        const product = await ProductRepository.create(productData);
        await SearchEngineClient.indexProduct(product);
        return product;
    }
}

module.exports = ProductService;
```

### **3Ô∏è‚É£ ProductRepository.js**
```javascript
const db = require("../config/database");

class ProductRepository {
    static async getAll() {
        return db("products").select("*");
    }
    
    static async create(product) {
        return db("products").insert(product).returning("*");
    }
}

module.exports = ProductRepository;
```

---
## üéØ **Conclus√£o**

Agora temos um **Modelo C4 completo** para o **Product Service** do e-commerce, incluindo:
‚úÖ **N√≠vel 1 - Contexto** ‚Üí Intera√ß√£o do servi√ßo com o sistema e usu√°rios.
‚úÖ **N√≠vel 2 - Cont√™ineres** ‚Üí Componentes do servi√ßo e suas intera√ß√µes.
‚úÖ **N√≠vel 3 - Componentes** ‚Üí Arquitetura interna do servi√ßo.
‚úÖ **N√≠vel 4 - C√≥digo** ‚Üí Implementa√ß√£o simplificada do Product Service.

üöÄ Essa arquitetura modular permite escalabilidade e flexibilidade para a evolu√ß√£o do e-commerce!

